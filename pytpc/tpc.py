"""Tagged Point Cloud (TPC) support for python"""

__VERSION__ = '0.0.1'

import uuid
import json
import numpy as np
import datetime
import gzip
import os
from collections import namedtuple,OrderedDict

_TPC_FORMAT = 'TPC 0.1'

TaggedPoint = namedtuple('TaggedPoint',['v','a','t'])

def point_so(attr_names,p):
    return dict(v=p.v,a=[p.a[k] for k in attr_names],t=p.t)

# TODO: Prevent forbidden attributes and check constraints on attributes
# with fixed meaning.

class TPC:
    def __init__(self,metadata=dict(),dimension=None,uuid_override=False):
        self.points = []
        self.metadata = metadata
        self._uuid_set = False
        self._uuid_override = uuid_override

    def _so(self):
        """Return a serialization object which json.dumps will convert to a valid TPC"""
        example_point = self.points[0]
        d = OrderedDict()
        d['format'] = _TPC_FORMAT
        d.update(self.metadata)
        d['dimension'] = len(example_point.v)
        d['attributes'] = sorted(example_point.a.keys())

        ser = lambda p:point_so(d['attributes'],p)
        d['points'] = [ser(p) for p in self.points]
        return d

    def set_timestamp(self,ts=None):
        if ts == None:
            self.metadata['timestamp'] = datetime.datetime.now(datetime.timezone.utc)
        else:
            self.metadata['timestamp'] = ts
            
    def set_uuid(self,u=None):
        if u == None:
            self.metadata['uuid'] = uuid.uuid4()
        else:
            self.metadata['uuid'] = u
        self._uuid_generated = True

    def _warn_uuid(self):
        if 'uuid' in self.metadata and not self._uuid_generated and not self._uuid_override:
            raise Exception('Refusing to write TPC with UUID set but not generated by this library; this is to avoid the possibility of writing a modified TPC with same UUID.  Pass "uuid_override=True" in TPC constructor to prevent this exception.')
        
    def saves(self):
        self._warn_uuid()
        return json.dumps(self,cls=TPCEncoder)

    def savefp(self,fp):
        self._warn_uuid()
        return json.dump(self,fp,cls=TPCEncoder)
    
    def savefn(self,fn,clobber=False):
        self._warn_uuid()
        if clobber:
            mode = 'wt'
        else:
            mode = 'xt'        
        with open(fn,mode,encoding='utf-8') as fp:
            return self.savefp(fp)
        
    def zsavefn(self,fn,clobber=False,force_compression=True):
        self._warn_uuid()
        fn_base, fn_ext = os.path.splitext(fn)
        if clobber:
            mode = 'wt'
        else:
            mode = 'xt'

        if force_compression or fn_ext.lower() == '.tpz':
            with gzip.open(fn,mode,encoding='utf-8') as fp:
                self.savefp(fp)
        else:
            with open(fn,mode,encoding='utf-8') as fp:
                self.savefp(fp)


class TPCEncoder(json.JSONEncoder):
    def default(self, obj):
        """Detect TPC classes, serialize according to TPC 0.1"""
        
        if isinstance(obj, np.ndarray):
            return list(obj)

        if isinstance(obj, uuid.UUID):
            return str(obj)

        if isinstance(obj, datetime.datetime):
            return obj.isoformat()
        
        if isinstance(obj,TPC):
            return obj._so()
            
        # No special handling called for; pass through
        return json.JSONEncoder.default(self, obj)

    
if __name__=='__main__':
    import sys
    T = TPC(
        metadata={'description':'An example TPC file',
                  'optional': {'what': 'Additional attributes',
                               'why': 'Are permitted'},
                  'space': 'The Euclidean plane',
        }
    )
    T.points.append(TaggedPoint([1.0,1.0],{'sum': 2.0, 'min': 1.0}, ['positive']))
    T.points.append(TaggedPoint([1.0,2.0],{'sum': 3.0, 'min': 1.0}, ['positive','distinct']))
    T.points.append(TaggedPoint([-2.0,1.0],{'sum': -1.0, 'min': -2.0}, ['distinct']))
    T.points.append(TaggedPoint([-3.0,-3.0],{'sum': -6.0, 'min': -3.0}, []))

    T.set_timestamp()
    T.set_uuid()
    
    print(T.saves())
    T.savefp(sys.stdout)
    T.savefn('out.tpc')
    T.zsavefn('out.tpz')

    
